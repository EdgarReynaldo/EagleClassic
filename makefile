#/*
# *
# *     _______       ___       ____      __       _______
# *    /\  ____\    /|   \     /  __\    /\ \     /\  ____\
# *    \ \ \___/_   ||  _ \   |  /__/____\ \ \    \ \ \___/_
# *     \ \  ____\  || |_\ \  |\ \ /\_  _\\ \ \    \ \  ____\
# *      \ \ \___/_ ||  ___ \ \ \ \\//\ \/ \ \ \____\ \ \___/_
# *       \ \______\||_|__/\_\ \ \ \_\/ |   \ \_____\\ \______\
# *        \/______/|/_/  \/_/  \_\_____/    \/_____/ \/______/
# *
# *
# *    EAGLE
# *    Edgar's Allegro Gui Library and Extensions
# *
# *    Copyright 2009-2011 by Edgar Reynaldo
# *
# *    See EagleLicense.txt for allowed uses of this library.
# *
# */

# Must include makefile.version before makefile.platform!
include makefile.version

# Platform specific shiznit goes here
# makefile.platform is generated by fix.*

include makefile.platform



ifndef STATICLINK
   DYNAMICLINK = 1
endif

ifndef DEBUGMODE
   ifndef PROFILEMODE
      RELEASEMODE = 1
   endif
else
   PROFILEMODE=
   RELEASEMODE=
endif

ifndef PROFILEMODE
   ifndef DEBUGMODE
      RELEASEMODE = 1
   endif
else
   DEBUGMODE=
   RELEASEMODE=
endif

ifndef BUILDDIR
   BUILDDIR = makebuild
endif

# only use forward slashes
BUILDDIR := $(subst \,/,$(BUILDDIR))
INSTALLDIR := $(subst \,/,$(INSTALLDIR))

# remove trailing backslashes
BUILDDIR := $(patsubst %\,%,$(BUILDDIR))
INSTALLDIR := $(patsubst %\,%,$(INSTALLDIR))

# remove trailing forward slashes??? What if someone tries to build or install in root?  That would be dumb anyway. Too bad moron.
BUILDDIR := $(patsubst %/,%,$(BUILDDIR))
INSTALLDIR := $(patsubst %/,%,$(INSTALLDIR))


WFLAGS = -Wall -Wshadow -Wextra
CC = g++

ifeq (WINDOWS,$(PLATFORM))
   LIBALLEGROPROFILE := -lalleg44-debug.dll
   LIBALLEGRODEBUG := -lalleg44-debug.dll
   LIBALLEGRORELEASE := -lalleg44.dll
endif
ifeq (NIX,$(PLATFORM))
   LIBALLEGROPROFILE := -lalleg-profile
   LIBALLEGRODEBUG := -lalleg-debug
   LIBALLEGRORELEASE := -lalleg
endif

ifdef STATICLINK
   ifdef PROFILEMODE
      OBJDIR := $(BUILDDIR)/obj/Static/Profiling
      LIBSUFFIX := -profile-static
      CFLAGS := -pg
      LFLAGS := -pg $(GMON)
      MODE := Static Profiling mode
   endif
   ifdef DEBUGMODE
      OBJDIR := $(BUILDDIR)/obj/Static/Debug
      LIBSUFFIX := -debug-static
      CFLAGS := -g -DDEBUGMODE -DEAGLE_ASSERT_EXCEPTION
      LFLAGS :=
      MODE := Static Debugging mode
   endif
   ifdef RELEASEMODE
      OBJDIR := $(BUILDDIR)/obj/Static/Release
      LIBSUFFIX := -static
      CFLAGS := -O2
      LFLAGS :=
      MODE := Static Release mode
   endif
   CFLAGS := $(CFLAGS) -c -DALLEGRO_STATICLINK
endif
ifdef DYNAMICLINK
   ifdef PROFILEMODE
      OBJDIR := $(BUILDDIR)/obj/Dynamic/Profiling
      LIBSUFFIX := -profile
      CFLAGS := -pg
      LFLAGS := -pg $(GMON) $(LIBALLEGROPROFILE)
      MODE := Dynamic Profiling mode
   endif
   ifdef DEBUGMODE
      OBJDIR := $(BUILDDIR)/obj/Dynamic/Debug
      LIBSUFFIX := -debug
      CFLAGS := -g -DDEBUGMODE -DEAGLE_ASSERT_EXCEPTION
      LFLAGS := $(LIBALLEGRODEBUG)
      MODE := Dynamic Debugging mode
   endif
   ifdef RELEASEMODE
      OBJDIR := $(BUILDDIR)/obj/Dynamic/Release
      LIBSUFFIX := 
      CFLAGS := -O2
      LFLAGS := $(LIBALLEGRORELEASE)
      MODE := Dynamic Release mode
   endif
   CFLAGS := $(CFLAGS) -c
   CFLAGS := $(CFLAGS) $(EXTRACFLAGS)
endif



ALLEGRO_INCLUDE_DIR = $(ALLEGRO_DIR)\include
ALLEGRO_LINK_DIR = $(ALLEGRO_DIR)\lib

COMPILEFLAGS = $(WFLAGS) $(CFLAGS) -I$(ALLEGRO_INCLUDE_DIR)
LINKFLAGS = -L$(ALLEGRO_LINK_DIR) $(LFLAGS)

CPPSRCS = $(notdir $(wildcard src/*.cpp))
CSRCS = $(notdir $(wildcard src/*.c))
CPPGUISRCS = $(notdir $(wildcard src/GuiCode/*.cpp))
CGUISRCS = $(notdir $(wildcard src/GuiCode/*.c))

CPPOBJS = $(addsuffix .o , $(basename $(CPPSRCS)))
COBJS = $(addsuffix .o , $(basename $(CSRCS)))
CPPGUIOBJS = $(addsuffix .o , $(basename $(CPPGUISRCS)))
CGUIOBJS = $(addsuffix .o , $(basename $(CGUISRCS)))

CPPOBJS := $(addprefix $(OBJDIR)/,$(CPPOBJS))
COBJS := $(addprefix $(OBJDIR)/,$(COBJS))
CPPGUIOBJS := $(addprefix $(OBJDIR)/,$(CPPGUIOBJS))
CGUIOBJS := $(addprefix $(OBJDIR)/,$(CGUIOBJS))

CPPSRCS := $(addprefix src/,$(CPPSRCS))
CSRCS := $(addprefix src/,$(CSRCS))
CPPGUISRCS := $(addprefix src/GuiCode/,$(CPPGUISRCS))
CGUISRCS := $(addprefix src/GuiCode/,$(CGUISRCS))

ALLCSRCS := $(CSRCS) $(CGUISRCS)
ALLCPPSRCS := $(CPPSRCS) $(CPPGUISRCS)
ALLSRCS := $(ALLCSRCS) $(ALLCPPSRCS)

ALLCOBJS := $(COBJS) $(CGUIOBJS)
ALLCPPOBJS := $(CPPOBJS) $(CPPGUIOBJS)
ALLOBJS := $(ALLCOBJS) $(ALLCPPOBJS)

CURRENTDFILES = $(wildcard $(BUILDDIR)/obj/*.d)



#$(warning All .d objects for c objs - $(ALLCOBJS:%.c=$(OBJDIR)$(SLASH)%.d))
#$(warning All .d objects for cpp objs - $(ALLCPPOBJS:%.cpp=$(OBJDIR)$(SLASH)%.d))
#include $(ALLCOBJS:%.c=$(OBJDIR)$(SLASH)%.d)
#include $(ALLCPPOBJS:%.cpp=$(OBJDIR)$(SLASH)%.d)

#CHDRS = $(notdir $(wildcard include/*.h))
#CPPHDRS = $(notdir $(wildcard include/*.hpp))
#CGUIHDRS = $(notdir $(wildcard include/GuiCode/*.h))
#CPPGUIHDRS = $(notdir $(wildcard include/GuiCode/*.hpp))

EAGLEHDR = include/Eagle.hpp
CHDRS := $(wildcard include/Eagle/*.h)
CPPHDRS := $(wildcard include/Eagle/*.hpp)
CGUIHDRS := $(wildcard include/Eagle/GuiCode/*.h)
CPPGUIHDRS := $(wildcard include/Eagle/GuiCode/*.hpp)

HDRS := $(CHDRS) $(CPPHDRS)
GUIHDRS := $(CGUIHDRS) $(CPPGUIHDRS)
ALLHDRS := $(EAGLEHDR) $(HDRS) $(GUIHDRS)

INSTALLEDHEADERS := $(addprefix $(INSTALLDIR)/,$(ALLHDRS))

BUILDLIBDIR := $(BUILDDIR)/lib
LIBNAME = eagle4
# eagle_*
FULLLIBNAME := $(LIBNAME)$(LIBSUFFIX)

# WIN = eagle_*.dll    NIX = eagle_*.so.1
DLLNAME := $(FULLLIBNAME)$(SHAREDLIBEXT)

#soname = dll , -o = .a
#static libs on *NIX are .a files

ifdef STATICLINK
   # libeagle_*.a
   ARCHIVENAME := lib$(FULLLIBNAME).a
else
   # libeagle_*.so on unix , libeagle_*.dll.a on MinGW
   ifeq (WINDOWS,$(PLATFORM))
      # WIN = libeagle_*.dll.a
      ARCHIVENAME := lib$(DLLNAME).a
   endif
   ifeq (NIX,$(PLATFORM))
      # NIX libeagle_*.so
      ARCHIVENAME := lib$(FULLLIBNAME).so
      SONAME = $(ARCHIVENAME).$(MAJORVERSION).$(MINORVERSION)
      DLLNAME := lib$(DLLNAME).$(FULLVERSION)
   endif
   OUTPUTDLL := $(BUILDLIBDIR)$(SLASH)$(DLLNAME)
endif

INSTALLBINDIR := $(INSTALLDIR)/bin
INSTALLLIBDIR := $(INSTALLDIR)/lib
INSTALLINCLUDEDIR := $(INSTALLDIR)/include

#OBJDIR := $(subst /,$(SLASH),$(OBJDIR))



#BUILDDIRECTORIES = $(BUILDLIBDIR) $(OBJDIR)
#INSTALLDIRECTORIES = $(INSTALLBINDIR) $(INSTALLDIR)$(SLASH)lib $(INSTALLDIR)$(SLASH)include$(SLASH)Eagle$(SLASH)GuiCode

OUTPUTLIB := $(BUILDLIBDIR)/$(ARCHIVENAME)


ifeq (WINDOWS,$(PLATFORM))
   ifdef DYNAMICLINK
      OUTPUTDEF = $(BUILDLIBDIR)/$(DLLNAME).def
      CREATEDEF = -Wl,--output-def=$(OUTPUTDEF)
      CREATEIMPLIB = -Wl,--out-implib=$(OUTPUTLIB)
      MAKEDLL = -Wl,--dll
   endif
endif
ifeq (NIX,$(PLATFORM))
   CREATEIMPLIB = -Wl,-soname,$(SONAME)
endif


#ifneq (Exists,$(shell $(DIREXISTS) $(BUILDLIBDIR)))
   BUILDDIRECTORIES += $(BUILDLIBDIR)
#endif
#ifneq (Exists,$(shell $(DIREXISTS) $(OBJDIR)))
   BUILDDIRECTORIES += $(OBJDIR)
#endif

#ifneq (Exists,$(shell $(DIREXISTS) $(INSTALLBINDIR)))
   INSTALLDIRECTORIES += $(INSTALLBINDIR)
#endif
#ifneq (Exists,$(shell $(DIREXISTS) $(INSTALLLIBDIR)))
   INSTALLDIRECTORIES += $(INSTALLLIBDIR)
#endif
#ifneq (Exists,$(shell $(DIREXISTS) $(INSTALLINCLUDEDIR)))
   INSTALLDIRECTORIES += $(INSTALLINCLUDEDIR)/Eagle/GuiCode
#endif


#fake : $(BUILDDIRECTORIES) $(INSTALLDIRECTORIES)
#	$(ECHO) Build directories to build : $(BUILDDIRECTORIES)
#	$(ECHO) Install directories to build : $(INSTALLDIRECTORIES)


# Targets begin here

#installheaders : $(INSTALLEDHEADERS)
#	$(ECHO) Newer prereqs : $?
#	$(ECHO)
#	$(ECHO) $(INSTALLEDHEADERS)



ifdef STATICLINK
   $(OUTPUTLIB)  : $(ALLOBJS) | $(BUILDLIBDIR)/
	$(ECHO) Building lib $(OUTPUTLIB) in $(MODE)
#	$(ECHO) Newer prereqs : $?
	$(TEST) $(AR) -rcs $(OUTPUTLIB) $(ALLOBJS)
endif

ifdef DYNAMICLINK
   $(OUTPUTLIB) $(OUTPUTDLL) $(OUTPUTDEF) : $(ALLOBJS) | $(BUILDLIBDIR)/
# Windows
# mingw32-g++.exe -shared -Wl,--output-def=build\lib\libeagle_r.dll.def -Wl,--out-implib=build\lib\libeagle_r.dll.a -Wl,--dll
# *NIX
# g++ -shared -Wl,-soname,libprint.so.1 -o libprint.so.1.0 $(OBJS)
	$(ECHO) Building lib $(OUTPUTLIB) in $(MODE)
#	$(ECHO) Newer prereqs : $?
	$(TEST) $(CC) -shared $(CREATEDEF) $(CREATEIMPLIB) $(MAKEDLL) $(ALLOBJS) -o $(OUTPUTDLL) $(LINKFLAGS)
endif

$(DIREXISTS) : DirExists.cpp
	$(CC) -Wall -O2 -o $(DIREXISTS) DirExists.cpp
ifeq (NIX,$(PLATFORM))
	chmod +x $(DIREXISTS)
endif

$(FIXDFILES) : Fixdfiles.cpp
	$(CC) -Wall -O2 -o $(FIXDFILES) Fixdfiles.cpp
ifeq (NIX,$(PLATFORM))
	chmod +x $(FIXDFILES)
endif

.PRECIOUS : $(BUILDDIR)/obj/%.d

include $(CURRENTDFILES)

$(BUILDDIR)/obj/%.d : src/%.c $(FIXDFILES) | $(OBJDIR)/
#	$(ECHO) $@ : Newer prereqs : $?
	$(TEST) $(CC) -MM $< -Iinclude > $@
	$(FIXDFILES) $(@D) $(@F)

$(BUILDDIR)/obj/%.d : src/%.cpp $(FIXDFILES) | $(OBJDIR)/
#	$(ECHO) $@ : Newer prereqs : $?
	$(TEST) $(CC) -MM $< -Iinclude > $@
	$(FIXDFILES) $(@D) $(@F)

$(BUILDDIR)/obj/%.d : src/GuiCode/%.c $(FIXDFILES) | $(OBJDIR)/
#	$(ECHO) $@ : Newer prereqs : $?
	$(TEST) $(CC) -MM $< -Iinclude > $@
	$(FIXDFILES) $(@D) $(@F)

$(BUILDDIR)/obj/%.d : src/GuiCode/%.cpp $(FIXDFILES) | $(OBJDIR)/
#	$(ECHO) $@ : Newer prereqs : $?
	$(TEST) $(CC) -MM $< -Iinclude > $@
	$(FIXDFILES) $(@D) $(@F)

#$(warning Including d files!)
#include $(COBJS:%.o:%.d)
#include $(CPPOBJS:%.o:%.d)
#include $(CGUIOBJS:%.o:%.d)
#include $(CPPGUIOBJS:%.o:%.d)

$(OBJDIR)/%.o : src/%.c $(BUILDDIR)/obj/%.d
#	$(ECHO) $@ : Newer prereqs : $?
	$(TEST) $(CC) $(COMPILEFLAGS) -Iinclude -o $@ $<

$(OBJDIR)/%.o : src/%.cpp $(BUILDDIR)/obj/%.d
#	$(ECHO) $@ : Newer prereqs : $?
	$(TEST) $(CC) $(COMPILEFLAGS) -Iinclude -o $@ $<

$(OBJDIR)/%.o : src/GuiCode/%.c $(BUILDDIR)/obj/%.d
#	$(ECHO) $@ : Newer prereqs : $?
	$(TEST) $(CC) $(COMPILEFLAGS) -Iinclude -o $@ $<

$(OBJDIR)/%.o : src/GuiCode/%.cpp $(BUILDDIR)/obj/%.d
#	$(ECHO) $@ : Newer prereqs : $?
	$(TEST) $(CC) $(COMPILEFLAGS) -Iinclude -o $@ $<


makefile.platform :
ifeq (,$(findstring makefile.platform,$(wildcard makefile.platform)))
	$(error Please run fix.bat for Windows or ./fix.sh for *nix to generate makefile.platform)
endif


$(BUILDLIBDIR)/ :
	-$(MKDIR) $(subst /,$(SLASH),$(BUILDLIBDIR))

$(OBJDIR)/ :
	-$(MKDIR) $(subst /,$(SLASH),$(OBJDIR))

$(INSTALLBINDIR)/ :
	-$(MKDIR) $(subst /,$(SLASH),$(INSTALLBINDIR))

$(INSTALLLIBDIR)/ :
	-$(MKDIR) $(subst /,$(SLASH),$(INSTALLLIBDIR))

$(INSTALLINCLUDEDIR)/Eagle/GuiCode/ :
	-$(MKDIR) $(subst /,$(SLASH),$(INSTALLINCLUDEDIR)/Eagle/GuiCode)

.PHONY : all
all :
	$(MAKE) DEBUGMODE=1 BUILDDIR=$(BUILDDIR)
	$(MAKE) PROFILEMODE=1 BUILDDIR=$(BUILDDIR)
	$(MAKE) BUILDDIR=$(BUILDDIR)
	$(MAKE) DEBUGMODE=1 STATICLINK=1 BUILDDIR=$(BUILDDIR)
	$(MAKE) PROFILEMODE=1 STATICLINK=1 BUILDDIR=$(BUILDDIR)
	$(MAKE) STATICLINK=1 BUILDDIR=$(BUILDDIR)


.PHONY : install
ifdef STATICLINK
   install : $(OUTPUTLIB) $(INSTALLEDHEADERS) | $(INSTALLBINDIR)/
#	$(ECHO) Newer prereqs : $?
#	$(ECHO) $(INSTALLEDHEADERS)
#	$(ECHO) INSTALLINCLUDEDIR = $(INSTALLINCLUDEDIR)
endif
ifdef DYNAMICLINK
   install : $(OUTPUTLIB) $(OUTPUTDLL) $(OUTPUTDEF) $(INSTALLEDHEADERS) | $(INSTALLLIBDIR)/ $(INSTALLBINDIR)/
#	$(ECHO) Newer prereqs : $?
#	$(ECHO) $(INSTALLEDHEADERS)
#	$(ECHO) INSTALLINCLUDEDIR = $(INSTALLINCLUDEDIR)
endif
ifeq (WINDOWS,$(PLATFORM))
	$(COPY) $(subst /,$(SLASH),$(OUTPUTLIB)) $(subst /,$(SLASH),$(INSTALLLIBDIR))
   ifdef DYNAMICLINK
	$(COPY) $(subst /,$(SLASH),$(OUTPUTDLL)) $(subst /,$(SLASH),$(INSTALLBINDIR))
   endif
endif
ifeq (NIX,$(PLATFORM))
   ifdef STATICLINK
	$(COPY) $(OUTPUTLIB) $(INSTALLLIBDIR)
   endif
   ifdef DYNAMICLINK
	$(COPY) $(OUTPUTDLL) $(INSTALLLIBDIR)
	ln -sf $(INSTALLLIBDIR)/$(DLLNAME) $(INSTALLDIR)/lib/$(SONAME)
	ln -sf $(INSTALLLIBDIR)/$(SONAME) $(INSTALLDIR)/lib/$(ARCHIVENAME)
   endif
endif

$(INSTALLEDHEADERS) : | $(INSTALLINCLUDEDIR)/Eagle/GuiCode/

$(INSTALLINCLUDEDIR)/Eagle.hpp : include/Eagle.hpp
	$(COPY) $(subst /,$(SLASH),$<) $(subst /,$(SLASH),$@)

$(INSTALLINCLUDEDIR)/Eagle/%.h : include/Eagle/%.h
	$(COPY) $(subst /,$(SLASH),$<) $(subst /,$(SLASH),$@)

$(INSTALLINCLUDEDIR)/Eagle/%.hpp : include/Eagle/%.hpp
	$(COPY) $(subst /,$(SLASH),$<) $(subst /,$(SLASH),$@)

$(INSTALLINCLUDEDIR)/Eagle/GuiCode/%.h : include/Eagle/GuiCode/%.h
	$(COPY) $(subst /,$(SLASH),$<) $(subst /,$(SLASH),$@)

$(INSTALLINCLUDEDIR)/Eagle/GuiCode/%.hpp : include/Eagle/GuiCode/%.hpp
	$(COPY) $(subst /,$(SLASH),$<) $(subst /,$(SLASH),$@)


#$(INSTALLEDHEADERS) : $(INSTALLDIRECTORIES) $(ALLHDRS)
#	$(COPY) include$(SLASH)Eagle.hpp $(INSTALLDIR)$(SLASH)include
#	$(COPY) include$(SLASH)Eagle$(SLASH)*.* $(INSTALLDIR)$(SLASH)include$(SLASH)Eagle
#	$(COPY) include$(SLASH)Eagle$(SLASH)GuiCode$(SLASH)*.* $(INSTALLDIR)$(SLASH)include$(SLASH)Eagle$(SLASH)GuiCode

.PHONY : uninstall installall uninstallall

uninstall :
	-$(REMOVE) $(subst /,$(SLASH),$(INSTALLBINDIR)/$(DLLNAME))
	-$(REMOVE) $(subst /,$(SLASH),$(INSTALLLIBDIR)/$(ARCHIVENAME))
	-$(REMDIR) $(subst /,$(SLASH),$(INSTALLINCLUDEDIR)/Eagle)
	-$(REMOVE) $(subst /,$(SLASH),$(INSTALLINCLUDEDIR)/Eagle.hpp)

installall :
	$(MAKE) DEBUGMODE=1 install BUILDDIR=$(BUILDDIR) INSTALLDIR=$(INSTALLDIR)
	$(MAKE) PROFILEMODE=1 install BUILDDIR=$(BUILDDIR) INSTALLDIR=$(INSTALLDIR)
	$(MAKE) install BUILDDIR=$(BUILDDIR) INSTALLDIR=$(INSTALLDIR)
	$(MAKE) DEBUGMODE=1 STATICLINK=1 install BUILDDIR=$(BUILDDIR) INSTALLDIR=$(INSTALLDIR)
	$(MAKE) PROFILEMODE=1 STATICLINK=1 install BUILDDIR=$(BUILDDIR) INSTALLDIR=$(INSTALLDIR)
	$(MAKE) STATICLINK=1 install BUILDDIR=$(BUILDDIR) INSTALLDIR=$(INSTALLDIR)

uninstallall :
	$(MAKE) DEBUGMODE=1 uninstall INSTALLDIR=$(INSTALLDIR)
	$(MAKE) PROFILEMODE=1 uninstall INSTALLDIR=$(INSTALLDIR)
	$(MAKE) uninstall INSTALLDIR=$(INSTALLDIR)
	$(MAKE) DEBUGMODE=1 STATICLINK=1 uninstall INSTALLDIR=$(INSTALLDIR)
	$(MAKE) PROFILEMODE=1 STATICLINK=1 uninstall INSTALLDIR=$(INSTALLDIR)
	$(MAKE) STATICLINK=1 uninstall INSTALLDIR=$(INSTALLDIR)

# These targets are for building with codeblocks
.PHONY : Debug Release Profiling DebugStatic ReleaseStatic ProfilingStatic

Debug :
	$(MAKE) DEBUGMODE=1

Release :
	$(MAKE)

Profiling :
	$(MAKE) PROFILEMODE=1

DebugStatic :
	$(MAKE) DEBUGMODE=1 STATICLINK=1

ReleaseStatic :
	$(MAKE) STATICLINK=1

ProfilingStatic :
	$(MAKE) PROFILEMODE=1 STATICLINK=1


.PHONY : clean cleanobj cleanlib

clean : cleanobj cleanlib

cleanobj :
	$(REMOVE) $(subst /,$(SLASH),$(OBJDIR)/*.o)
	$(REMOVE) $(subst /,$(SLASH),$(BUILDDIR)/obj/*.d)

cleanlib :
	$(REMOVE) $(subst /,$(SLASH),$(OUTPUTLIB))
ifdef DYNAMICLINK
   ifneq (,$(OUTPUTDLL))
	$(REMOVE) $(subst /,$(SLASH),$(OUTPUTDLL))
   endif
   ifneq (,$(OUTPUTDEF))
	$(REMOVE) $(subst /,$(SLASH),$(OUTPUTDEF))
   endif
endif

cleanall :
	$(MAKE) DEBUGMODE=1 clean
	$(MAKE) PROFILEMODE=1 clean
	$(MAKE) clean
	$(MAKE) DEBUGMODE=1 STATICLINK=1 clean
	$(MAKE) PROFILEMODE=1 STATICLINK=1 clean
	$(MAKE) STATICLINK=1 clean

help :
	$(ECHO) Available options : (Default build is dynamic release mode)
	$(ECHO) DEBUGMODE=1
	$(ECHO) PROFILEMODE=1
	$(ECHO) STATICLINK=1
	$(ECHO) on
	$(ECHO) Available targets : (Default target is dynamic release library)
	$(ECHO) all
	$(ECHO) install
	$(ECHO) uninstall
	$(ECHO) installall
	$(ECHO) uninstallall
	$(ECHO) clean
	$(ECHO) cleanall
	$(ECHO) on
	$(ECHO) Default installation directory is %MINGDIR% for Windows and /usr for *nix
	$(ECHO) Set using INSTALLDIR=install/directory/path
	$(ECHO) Default build directory is makebuild.
	$(ECHO) Set using BUILDDIR=build/directory
	$(ECHO) BUILDDIR and INSTALLDIR should not be the same.


